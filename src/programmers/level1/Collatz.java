package programmers.level1;

public class Collatz {
    public int solution(long num) {
        if(num == 1) return 0;
        int answer = 0;
        int count = 0;
        long temp = num;
        while(count < 500) {
            temp = (temp % 2 == 0)? (temp/2):(temp*3)+1;
            answer ++;
            if(temp == 1) break;
            count ++;
        }
        if(temp != 1) {
            return -1;
        }
        return answer;
    }
}
/*
    개인 해설
    처음 문제를 보고 굉장히 간단한 문제로 생각했습니다.
    자신감있게 제출을 했는데.. 생각과 다르게 흘러간 부분이 두 가지 있었습니다.
    1. int 범위를 벗어나는 케이스 (input 값 기본 자료형은 int 였습니다)
        - input 값의 자료형을 long으로 변경하여 해결하였습니다.
    2. input 값이 1인 케이스
        - input 값이 1이라면 문제의 작업을 반복하여도 결과값이 1이 될 수 없기에 0을 리턴하였습니다.
    해결하였으나 역시 코딩은 간단하게 생각하고 넘어갈 부분이 없다는 걸 다시 느꼈습니다.

    * 우아한 테크 코스 테스트 문제를 진행하며
    for문보다 while문이 가독성이 좋다고 느껴져서 요즘 while문을 사용하고 있는데(무한 루프에 대한 방어코드는 항상 작성중!),
    역시 카운팅이 필요한 루프문에서는 for문이 좋은 것 같습니다.

 */
/*
    문제
    programmers - 연습문제 - 콜라츠 추측
    https://programmers.co.kr/learn/courses/30/lessons/12943

문제 설명
1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다.
    1-1. 입력된 수가 짝수라면 2로 나눕니다.
    1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다.
    2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다.
예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1 이 되어 총 8번 만에 1이 됩니다.
위 작업을 몇 번이나 반복해야하는지 반환하는 함수, solution을 완성해 주세요. 단, 작업을 500번을 반복해도 1이 되지 않는다면 –1을 반환해 주세요.

제한 사항
입력된 수, num은 1 이상 8000000 미만인 정수입니다.
입출력 예
n	result
6	    8
16	    4
626331	-1

입출력 예 설명
입출력 예 #2
16 -> 8 -> 4 -> 2 -> 1 이되어 총 4번만에 1이 됩니다.
입출력 예 #3
626331은 500번을 시도해도 1이 되지 못하므로 -1을 리턴해야합니다.

 */